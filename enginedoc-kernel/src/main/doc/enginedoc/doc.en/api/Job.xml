<?xml version="1.0"?>
<!-- $Id$ -->

<?xml-stylesheet href="api-default_language.xsl" type="text/xsl"?>


<api.class
    name        = "Job"
    object_name = "spooler_job"
    base_dir    = "../"
    author      = "$Author: jz $"
    date        = "$Date: 2012-06-12 21:42:49 +0200 (Di, 12 Jun 2012) $"
>

    <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

    <method name="start_when_directory_changed">
        <com>
            <com.parameter name="directory_path">
                <com.type type="BSTR"/>
                <description>
                    the address of the directory being monitored
                <!--Pfad des zu überwachenden Verzeichnisses-->
                </description>
            </com.parameter>

            <com.parameter name="filename_pattern" optional="true">
                <com.type type="BSTR"/>
                <description>
                    restricts monitoring to files whose names correspond with the regular expression used.
                <!--Beschränkt die Überwachung auf Dateinamen, die dem Regulären Ausdruck entsprechen.-->
                </description>
            </com.parameter>
        </com>


        <java>
            <java.parameter name="directory_path">
                <java.type type="java.io.File"/>
            </java.parameter>

            <java.parameter name="filename_pattern" optional="true">
                <com.type type="BSTR"/>
            </java.parameter>
        </java>

        <java>
            <java.parameter name="directory_path">
                <java.type type="java.io.File"/>
            </java.parameter>

            <java.parameter name="filename_pattern" optional="true">
                <com.type type="BSTR"/>
            </java.parameter>
        </java>

        <java>
            <java.parameter name="directory_path">
                <com.type type="BSTR"/>
            </java.parameter>
        </java>

        <java>
            <java.parameter name="directory_path">
                <com.type type="BSTR"/>
            </java.parameter>

            <java.parameter name="filename_pattern" optional="true">
                <com.type type="BSTR"/>
            </java.parameter>
        </java>

        <title>
            Monitors a directory and starts a task should a notification of a change be received
        <!--Überwacht ein Verzeichnis und lässt bei Änderung eine Task starten-->
        </title>

        <description>
            <p>
                Should there not be a task belonging to this job running and a notification be received that 
                a change in the directory being monitored has occurred
                (that a file has been added, renamed or deleted), 
                then this change can be used to prompt the JobScheduler to start a task 
                if the current time falls within that allowed by the <scheduler_element name="run_time"/> parameter.
            <!--Wenn keine Task des Jobs läuft und sich das Verzeichnis geändert hat
                (eine Datei hinzukommt, umbenannt oder entfernt wird),
                startet der JobScheduler innerhalb der <scheduler_element name="run_time"/> eine Task.-->
            </p>
            <p>
                This method can be called a more than once in order to allow the monitoring of a number of directories.
                A repeat call can also be made to a directory in order to reactivate monitoring - 
                if, for example, it has not been possible to access the directory.
            <!--Um mehrere Verzeichnisse zu überwachen, kann der Aufruf wiederholt werden.
                Ein Aufruf mit einem bereits angegebenen Verzeichnis erneuert die Überwachung.-->
            </p>
            <p>
                This method call can be coded in the JobScheduler start script or in the 
                <scheduler_method class="Job_impl" method="spooler_init"/> method.
                In the latter case, the job must have been started at least once
                in order for the method call to be carried out.
                The <scheduler_element name="run_time" attribute="once" value="yes"/> setting should be used for this.
                
                <!--Der Aufruf kann im Scheduler-Skript oder in
                <scheduler_method class="Job_impl" method="spooler_init"/>
                des Jobs codiert werden.
                Im letzteren Fall muss der Job zu Beginn einmal starten,
                damit der Aufruf wirksam wird.
                Verwenden Sie dazu die Einstellung <scheduler_element name="run_time" attribute="once" value="yes"/>.-->
            </p>
            <p>
                The job should be regularly <scheduler_element name="run_time" attribute="repeat"/> restarted
                and <scheduler_element name="delay_after_error"/> set.
            <!--Der Job sollte mit <scheduler_element name="run_time" attribute="repeat"/> periodisch gestartet
                und mit <scheduler_element name="delay_after_error"/> versehen werden.-->
            </p>
            <p>
                The same setting can be made in the XML configuration using the
                <scheduler_element name="start_when_directory_changed"/>
                element.
            <!--Dieselbe Einstellung können Sie auch in der XML-Konfiguration mit
                <scheduler_element name="start_when_directory_changed"/>
                vornehmen.-->
            </p>
        </description>

        <example programming_language="javascript">
            <pre>spooler_job.start_when_directory_changed( "c:/tmp" );</pre>
            <pre>// only relevant for files whose names do not end in "~".
spooler_job.start_when_directory_changed( "c:/tmp", "^.*[^~]$" );</pre>
        <!--<pre>// Nur Dateien beachten, deren Name nicht auf "~" endet.
spooler_job.start_when_directory_changed( "c:/tmp", "^.*[^~]$" );</pre>-->
        </example>

        <example programming_language="javax.script">
            <pre>spooler_job.start_when_directory_changed( "c:/tmp" );</pre>
            <pre>// only relevant for files whose names do not end in "~".
spooler_job.start_when_directory_changed( "c:/tmp", "^.*[^~]$" );</pre>
        </example>

        <example programming_language="perl"> 
            <pre>$spooler_job->start_when_directory_changed( 'c:/tmp' );</pre>
            <pre># only relevant for files whose names do not end in "~".
$spooler_job->start_when_directory_changed( 'c:/tmp', '^.*[^~]$' );</pre>
        </example>

		</method>

    <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

    <method name="clear_when_directory_changed">
        <com>
        </com>

        <title>
            Resets directory notification for all directories which have previously been set using 
            <code>start_when_directory_changed()</code>
        <!--Nimmt alle <code>start_when_directory_changed()</code> zurück-->
        </title>
    </method>

    <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

    <method name="start">
        <com>
            <com.parameter optional="true" name="variables">
                <com.type class="Variable_set"/>
            </com.parameter>

            <com.result>
                <com.type class="Task"/>
            </com.result>
        </com>

        <title>
            Creates a new task and places it in the task queue
        <!--Erzeugt eine neue Task und reiht sie in die Task-Warteschlange ein-->
        </title>

        <description>
            <p>
                The parameters are available to the 
                <scheduler_method class="Task" property="params"/>
                task.
                Two parameters are particularly relevant here:
            <!--Die Parameter stehen der Task mit
                <scheduler_method class="Task" property="params"/>
                zur Verfügung.
                Zwei besondere Parameter können angegeben werden:-->
            </p>

            <table cellpadding="0" cellspacing="0" style="margin-top: 1em; margin-left: 4ex">
                <tr>
                    <td>
                        <code>"spooler_task_name"</code>
                    </td>
                    <td style="padding-left: 1em">
                        gives the task a name which then appears in the status display, e.g. in the web interface.
                    <!--gibt der Task einen Namen, der in den Statusanzeigen erscheint.-->
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>"spooler_start_after"</code>
                    </td>
                    <td style="padding-left: 1em">
                        specifies a time in seconds (real number), after which the task is to start.
                        The JobScheduler <scheduler_element name="run_time"/> is ignored in this case.
                    <!--gibt eine Zeit in Sekunden (reelle Zahl) an, nach deren Ablauf die Task zu starten ist.
                        Dabei wird <scheduler_element name="run_time"/> nicht beachtet.-->
                    </td>
                </tr>
            </table>

            <p>
                See <scheduler_method class="Spooler" method="create_variable_set"/>,
                <scheduler_method class="Spooler" property="job"/>,
                <scheduler_method class="Variable_set" property="value"/>.
            </p>
        </description>

        <example programming_language="java">
            <pre>spooler.job( "job_a" ).start();</pre>

            <pre>sos.spooler.Variable_set parameters = spooler.create_variable_set();
parameter.set_var( "my_parameter", "my_value" );
parameter.set_var( "other_parameter", "other_value" );
spooler.job( "job_a" ).start( parameters );</pre>
        </example>

        <example programming_language="javax.script">
            <pre>spooler.job( "job_a" ).start();</pre>

            <pre>
var parameters = spooler.create_variable_set();
parameters.set_var( "my_parameter", "my_value" );
parameters.set_var( "other_parameter", "other_value" );
spooler.job( "job_a" ).start( parameters );</pre>
        </example>

        <example programming_language="javascript">
            <pre>spooler.job( "job_a" ).start();</pre>

            <pre>var parameters = spooler.create_variable_set();
parameters.value( "my_parameter" ) = "my_value";
parameters.value( "other_parameter" ) = "other_value";
spooler.job( "job_a" ).start( parameters );</pre>
        </example>

        <example programming_language="vbscript">
            <pre>spooler.job( "job_a" ).start</pre>

            <pre>Dim parameters
Set parameters = spooler.create_variable_set()
parameters.var( "my_parameter" ) = "my_value"
parameters.var( "other_parameter" ) = "other_value"
spooler.job( "job_a" ).start( parameters )</pre>
        </example>

        <example programming_language="perl">
            <pre>$spooler->job( 'job_a' )->start();</pre>

            <pre>my $parameters = $spooler->create_variable_set();
$parameters->LetProperty( 'var', 'my_parameter', 'my_value' );
$parameters->LetProperty( 'var', 'other_parameter', 'other_value' );
$spooler->job( 'job_a' )->start( $parameters );</pre>
        </example>
    </method>

    <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

    <property name="include_path" access="read">
        <com>
            <com.result>
                <com.type type="BSTR"/>
            </com.result>
        </com>

        <title>
            Value of the <code>-include-path=</code> option
        <!--Wert der Option <code>-include-path=</code>-->
        </title>

        <description>
            <p>
                See <scheduler_option name="include-path"/>.
            <!--Siehe <scheduler_option name="include-path"/>.-->
            </p>
        </description>
    </property>

    <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

    <property name="name" access="read">
        <com>
            <com.result>
                <com.type type="BSTR"/>
            </com.result>
        </com>

        <title>
            The job path beginning without a backslash
        <!--Pfad des Jobs ohne beginnenden Schrägstrich-->
        </title>
        
        <description>
            <p>
                See <scheduler_element name="job" attribute="name"/>.
            <!--Siehe <scheduler_element name="job" attribute="name"/>.-->
            </p>
        </description>
    </property>

    <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

    <method name="wake">
        <com/>
        <title>
            Causes a task to be started
        <!--Veranlasst den Start einer Task-->
        </title>

        <description>
            <p>
                Starts a task, should the job have the <code>pending</code> or <code>stopped</code> states.
            <!--Wenn der Job im Zustand <code>pending</code> oder <code>stopped</code> ist
                (also keine Task läuft),
                startet der Aufruf eine Task.-->
            </p>
            <p>
                See <scheduler_method class="Job" method="start"/>.
            <!--Siehe <scheduler_method class="Job" method="start"/>.-->
            </p>
        </description>
    </method>

    <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

    <property name="state_text" access="write">
        <com>
            <com.result>
                <com.type type="BSTR"/>
            </com.result>
        </com>

        <title>
            Free text for the job state
        <!--Freier Text für den Zustand des Jobs-->
        </title>

        <description>
            The text will be shown in the HTML interface.
        <!--Der Text wird in der HTML-Oberfläche gezeigt.-->
        </description>

        <example programming_language="java">
            <pre>spooler_job.set_state_text( "Step C succeeded" );</pre>
        </example>

        <example programming_language="javax.script">
            <pre>spooler_job.set_state_text( "Step C succeeded" );</pre>
        </example>

        <example programming_language="javascript">
            <pre>spooler_job.state_text = "Step C succeeded";</pre>
        </example>

        <example programming_language="perl">
            <pre>$spooler_job->LetProperty( 'state_text', 'Step C succeeded' );</pre>
        </example>
    </property>

    <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

    <property name="title" access="read">
        <com>
            <com.result>
                <com.type type="BSTR"/>
            </com.result>
        </com>

        <title>
            The job title
        <!--Titel des Jobs-->
        </title>

        <description>
            <p>
                See <scheduler_element name="job" attribute="title"/>.
            <!--Siehe <scheduler_element name="job" attribute="title"/>.-->
            </p>
        </description>

        <example programming_language="java">
            <pre>spooler_log.info( "Job title=" + spooler_job.title() );</pre>
        </example>

        <example programming_language="javax.script">
            <pre>spooler_log.info( "Job title=" + spooler_job.title() );</pre>
        </example>

        <example programming_language="javascript">
            <pre>spooler_log.info( "Job title=" + spooler_job.title );</pre>
        </example>

        <example programming_language="perl">
            <pre>$spooler_log->info( 'Job title=' . $spooler_job->title );</pre>
        </example>
    </property>

    <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

    <property name="delay_after_error" access="write">
        <com>
            <com.parameter name="error_steps">
                <com.type type="int"/>
                <description>
                    The number of consecutive errors required to initiate the delay
                <!--Anzahl der aufeinanderfolgenden Jobfehler, ab der die Verzögerung gilt-->
                </description>
            </com.parameter>

            <com.result name="seconds_or_hhmm_ss">
                <com.type type="VARIANT">
                    <com.type type="double"/>
                    <com.type type="int"/>
                    <com.type type="BSTR"/>
                </com.type>

                <description>
                    The delay after which the job will be rerun
                <!--Frist, nach der der Job wiederholt wird-->
                </description>
            </com.result>
        </com>

        <java>
            <com.parameter name="error_steps">
                <com.type type="int"/>
            </com.parameter>

            <com.result name="seconds">
                <com.type type="double"/>
            </com.result>
        </java>


        <java>
            <java.parameter name="error_steps">
                <com.type type="int"/>
            </java.parameter>

            <java.result name="hhmm_ss">
                <com.type type="BSTR"/>
            </java.result>
        </java>

        <title>
            Delays the restart of a job in case of an error
        <!--Verzögert erneuten Jobstart nach Fehler-->
        </title>

        <description>
            <p>
                A delay can be specified, should a particular number of errors occur in series.
                In this case the job will be terminated 
                and then restarted after the time specified.
            <!--Für verschiedene Anzahlen aufeinanderfolgender Fehler kann eine Verzögerung eingestellt werden.
                Der Job wird dann nicht gestoppt, sondern die angegebene Zeit verzögert und erneut gestartet.-->
            </p>
            <p>
                This method call can be repeated for differing numbers of errors.
                A different delay can be specified for each new method call.
            <!--Der Aufruf kann für verschiedene Anzahlen wiederholt werden.
                Man wird jeweils eine längere Verzögerung angeben.-->
            </p>
            <p>
                It is possible to set the value of the 
                <code>seconds_or_hhmm_ss</code> parameter to <code>"STOP"</code>
                in order to restrict the number of (unsuccessful) repetitions of a job.
                The job then is stopped when the number of consecutive errors specified is reached.
            <!--Wenn Sie den Parameter <code>seconds_or_hhmm_ss</code> als String übergeben,
                können Sie auch <code>"STOP"</code> angeben.
                Der Job stoppt, wenn er die angegebene Anzahl aufeinanderfolgende Fehler erreicht hat.-->
            </p>
            <p>
                A good position for this call is <scheduler_method class="Job_impl" method="spooler_init"/>.
            <!--Eine gute Stelle für die Aufrufe ist <scheduler_method class="Job_impl" method="spooler_init"/>.-->
            </p>
            <p>
                See <scheduler_element name="delay_after_error"/>.
            </p>
        </description>

        <example programming_language="java">
            <pre>
spooler_job.set_delay_after_error(  2,  10 );          // A 10 second delay after the 2nd consecutive error
spooler_job.set_delay_after_error(  5, "00:01" );      // One minute delay after the 5th consecutive error
spooler_job.set_delay_after_error( 10, "24:00" );      // A delay of one day after the 10th consecutive error
spooler_job.set_delay_after_error( 20, "STOP" );       // The Job is stopped after the 20th consecutive error</pre>
        <!--<pre>spooler_job.set_delay_after_error(  2,  10 );          // Ab dem 2. aufeinanderfolgenden Fehler um 10 Sekunden verzögern
spooler_job.set_delay_after_error(  5, "00:01" );      // Ab dem 5. aufeinanderfolgenden Fehler um eine Minute verzögern
spooler_job.set_delay_after_error( 10, "24:00" );      // Ab dem 10. aufeinanderfolgenden Fehler um einen Tag verzögern
spooler_job.set_delay_after_error( 20, "STOP" );       // Beim 20. aufeinanderfolgenden Fehler den Job stoppen</pre>-->

            <p>
                Should a (first) error occur whilst a job is being run, 
                the JobScheduler will restart the job immediately.<br/>
                However, after between two and four consecutive errors, 
                the JobScheduler will wait 10 seconds before restarting the job;<br/>
                After between five and nine consecutive errors, the job will be restarted after a delay of one minute;
                After between ten and nineteen errors, the delay is 24 hours. <br/>
                The job is stopped after the twentieth consecutive error.
            <!--Nach einem Fehler wiederholt der JobScheduler den Job sofort.<br/>
                Nach dem zweiten bis zum vierten Fehler verzögert der JobScheduler den Job um 10 Sekunden,<br/>
                nach dem fünften bis zum neunten Fehler um eine Minute, <br/>
                nach dem zehnten bis zum neunzehnten um 24 Stunden, <br/>
                nach dem zwanzigsten aufeinanderfolgenden Fehler schließlich stoppt der Job.-->
            </p>
        </example>

        <example programming_language="javax.script">
            <pre>
spooler_job.set_delay_after_error(  2,  10 );       // A 10 second delay after the 2nd consecutive error
spooler_job.set_delay_after_error(  5, "00:01" );   // One minute delay after the 5th consecutive error
spooler_job.set_delay_after_error( 10, "24:00" );   // A delay of one day after the 10th consecutive error
spooler_job.set_delay_after_error( 20, "STOP" );    // The Job is stopped after the 20th consecutive error</pre>
            <p>
                Should a (first) error occur whilst a job is being run,
                the JobScheduler will restart the job immediately.<br/>
                However, after between two and four consecutive errors,
                the JobScheduler will wait 10 seconds before restarting the job;<br/>
                After between five and nine consecutive errors, the job will be restarted after a delay of one minute;
                After between ten and nineteen errors, the delay is 24 hours. <br/>
                The job is stopped after the twentieth consecutive error.
            </p>
        </example>

        <example programming_language="javascript">
            <pre>
spooler_job.delay_after_error(  2 ) = 10;           // A 10 second delay after the 2nd consecutive error
spooler_job.delay_after_error(  5 ) = "00:01";      // One minute delay after the 5th consecutive error
spooler_job.delay_after_error( 10 ) = "24:00";      // A delay of one day after the 10th consecutive error
spooler_job.delay_after_error( 20 ) = "STOP";       // The Job is stopped after the 20th consecutive error
<!--
spooler_job.delay_after_error(  2 ) = 10;           // Ab dem 2. aufeinanderfolgenden Fehler um 10 Sekunden verzögern
spooler_job.delay_after_error(  5 ) = "00:01";      // Ab dem 5. aufeinanderfolgenden Fehler um eine Minute verzögern
spooler_job.delay_after_error( 10 ) = "24:00";      // Ab dem 10. aufeinanderfolgenden Fehler um einen Tag verzögern
spooler_job.delay_after_error( 20 ) = "STOP";       // Beim 20. aufeinanderfolgenden Fehler den Job stoppen-->
</pre>

            <p>
                Should a (first) error occur whilst a job is being run, 
                the JobScheduler will restart the job immediately.<br/>
                However, after between two and four consecutive errors, 
                the JobScheduler will wait 10 seconds before restarting the job;<br/>
                After between five and nine consecutive errors, the job will be restarted after a delay of one minute;
                After between ten and nineteen errors, the delay is 24 hours. <br/>
                The job is stopped after the twentieth consecutive error.
            <!--Nach einem Fehler wiederholt der JobScheduler den Job sofort.<br/>
                Nach dem zweiten bis zum vierten Fehler verzögert der JobScheduler den Job um 10 Sekunden,<br/>
                nach dem fünften bis zum neunten Fehler um eine Minute,<br/>
                nach dem zehnten bis zum neunzehnten um 24 Stunden, <br/>
                nach dem zwanzigsten aufeinanderfolgenden Fehler schließlich stoppt der Job.-->
            </p>
        </example>

		        <example programming_language="perl">
            <pre>
$spooler_job->LetProperty( 'delay_after_error',  2,  10 );          # A 10 second delay after the 2nd consecutive error
$spooler_job->LetProperty( 'delay_after_error',  5, '00:01' );      # One minute delay after the 5th consecutive error
$spooler_job->LetProperty( 'delay_after_error', 10, '24:00' );      # A delay of one day after the 10th consecutive error
$spooler_job->LetProperty( 'delay_after_error', 20, 'STOP' );       # The Job is stopped after the 20th consecutive error
</pre>

            <p>
                Should a (first) error occur whilst a job is being run, 
                the JobScheduler will restart the job immediately.<br/>
                However, after between two and four consecutive errors, 
                the JobScheduler will wait 10 seconds before restarting the job;<br/>
                After between five and nine consecutive errors, the job will be restarted after a delay of one minute;
                After between ten and nineteen errors, the delay is 24 hours. <br/>
                The job is stopped after the twentieth consecutive error.
            </p>
        </example>

    </property>

    <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

    <property name="order_queue" access="read">
        <com>
            <com.result>
                <com.type class="Order_queue"/>
                <description>
                    <api.null/>, should the job have no queue
                    (for <scheduler_element name="job" attribute="order" value="no"/>).
                <!--<api.null/>, wenn der Job keine Auftragswarteschlange hat
                    (bei <scheduler_element name="job" attribute="order" value="no"/>).-->
                </description>
            </com.result>
        </com>

        <title>
            The job order queue
        <!--Auftragswarteschlange des Jobs-->
        </title>

        <description>
            <p>
                Every job order (<scheduler_element name="job" attribute="order" value="yes"/>)
                has an order queue.
                This queue is filled by the job chain to which the job belongs.
            <!--Ein Auftragsjob (<scheduler_element name="job" attribute="order" value="yes"/>)
                hat eine Auftragswarteschlange.
                Die Auftragswarteschlange wird über eine Jobkette, in der der Job eingetragen ist, gefüllt.-->
            </p>
            <p>
                See <scheduler_method class="Job_chain" method="add_order"/>, and
            <!--Siehe <scheduler_method class="Job_chain" method="add_order"/>,-->
                <scheduler_method class="Job_chain" method="add_job"/>.
            </p>
        </description>

        <example programming_language="javax.script">
            <pre>spooler_log.info( 'order=' + ( spooler_job.order_queue() ? "yes" : "no" ) );</pre>
        </example>

        <example programming_language="perl">
            <pre>$spooler_log->info( 'order=' . ( defined $spooler_job->order_queue ? "yes" : "no" ) );</pre>
        </example>

        <example programming_language="javascript">
            <pre>spooler_log.info( 'order=' + ( spooler_job.order_queue ? "yes" : "no" ) );</pre>
        </example>

    </property>

    <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

    <property name="delay_order_after_setback" access="write">
        <com>
            <com.parameter name="setback_count">
                <com.type type="int"/>
                <description>
                    The number of consecutive errors and therefore setbacks for a job.
                    The setback delay can be varied according to this parameter.
                <!--Different delays can be set for each order setback.-->
                <!--Für die 1., 2. usw. aufeinanderfolgende Rückstellung desselben Auftrags
                    können verschiedene Fristen eingestellt werden.-->
                </description>
            </com.parameter>

            <com.result name="seconds_or_hhmm_ss">
                <com.type type="VARIANT">
                    <com.type type="double"/>
                    <com.type type="int"/>
                    <com.type type="BSTR"/>
                </com.type>
                <description>
                    Time limit for the setback of the order.
                    After expiry of the time limit, the order is reprocessed in the same job.
                <!--Frist für die Rückstellung.
                    Nach Ablauf der Frist kommt der Auftrag erneut in diesem Job zu Ausführung.-->
                </description>
            </com.result>
        </com>

        <java>
            <java.parameter name="setback_count">
                <com.type type="int"/>
            </java.parameter>

            <java.result name="seconds">
                <com.type type="double"/>
            </java.result>
        </java>

        <java>
            <java.parameter name="setback_count">
                <com.type type="int"/>
            </java.parameter>

            <java.result name="hhmm_ss">
                <com.type type="BSTR"/>
            </java.result>
        </java>

        <title>
            Delays after an order is setback<br/>
        <!--Stellt Aufträge nach Fehler zurück-->
        </title>

        <description>
            <p>
                A job can delay an order which is currently being carried out with 
                <scheduler_method class="Order" method="setback"/>.
                The order is then positioned at the rear of the order queue for that job and 
                carried out after the specified time limit.
            <!--Ein Auftragsjob kann einen Auftrag, den er gerade ausführt,
                mit <scheduler_method class="Order" method="setback"/>
                zurückstellen.
                Er wird dann an eine hintere Stelle der Auftragswarteschlange des Jobs eingereiht
                und kommt nach der eingestellten Zeit erneut zur Ausführung.-->
            </p>
            <p>
                The number of consecutively occurring setbacks for an order is counted.
                The delay set after a setback can be changed using <code>delay_order_after_setback</code>
                in the event of consecutively occurring setbacks.
            <!--Die aufeinanderfolgenden Rückstellungen eines Auftrags werden gezählt.
                Mit <code>delay_order_after_setback</code> können Sie verschiedene Fristen
                für wiederholte Rückstellungen festlegen.-->
            </p>
            <p>
                See  <br/>
            <!--Siehe  </br>-->
                <scheduler_element name="delay_order_after_setback"/>, <br/>
                <scheduler_method class="Order" method="setback"/>, <br/>
                <scheduler_method class="Job" property="max_order_setbacks"/>, <br/>
                <scheduler_method class="Job_chain" method="add_job"/>, <br/>
                <scheduler_method class="Job" method="delay_after_error"/>. <br/>
            </p>
        </description>

        <example programming_language="javax.script">
            <pre>
spooler_job.set_delay_order_after_setback( 1, 60 );        // for the 1st and 2nd consecutive setbacks of an order:
                                                           // delay the order 60s.

spooler_job.set_delay_order_after_setback( 3, "01:00" );   // After the 3rd consecutive setback of an order,
                                                           // the order will be delayed an hour.

spooler_job.set_max_order_setbacks( 5 );                   // The 5th setback sets the order to the error state
            </pre>
        </example>

        <example programming_language="javascript">
            <pre>
spooler_job.delay_order_after_setback( 1 ) = 60;         // for the 1st and 2nd consecutive setbacks of an order:
														 // delay the order 60s.
<!--<pre>spooler_job.delay_order_after_setback( 1 ) = 60;    // 1. bis 2. aufeinderfolgende Rückstellung desselben Auftrags:
                                                     // Auftrag um 60s verzögern.-->

spooler_job.delay_order_after_setback( 3 ) = "01:00";    // After the 3rd consecutive setback of an order,
														 // the order will be delayed an hour.
<!--spooler_job.delay_order_after_setback( 3 ) = "01:00";    // Ab 3. aufeinanderfolgender Rückstellung desselben Auftrags:
                                                     // Auftrag um eine Stunde verzögern.-->

spooler_job.max_order_setbacks = 5;              		 // The 5th setback sets the order to the error state
<!--spooler_job.max_order_setbacks = 5;              // Die 5. Rückstellung versetzt den Auftrag in den Fehlerzustand-->
</pre>
        </example>
		
        <example programming_language="perl">
            <pre>
    $spooler_job->LetProperty( 'delay_order_after_setback', 1, 60 );  		# for the 1st and 2nd consecutive setbacks of an order:
																			# delay the order 60s.
    $spooler_job->LetProperty( 'delay_order_after_setback', 3, '01:00' ); 	# After the 3rd consecutive setback of an order,
																			# the order will be delayed an hour.
    $spooler_job->LetProperty( 'max_order_setbacks', 5 );           		# The 5th setback sets the order to the error state
</pre>
        </example>

    </property>

    <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

    <property name="max_order_setbacks">
        <com>
            <com.result>
                <com.type type="int"/>
            </com.result>
        </com>

        <title>
            Limits the number of setbacks for an order
        <!--Begrenzt die Anzahl der Rückstellungen eines Auftrags-->
        </title>

        <description>
            <p>
                An order state is set to "error" 
                (see <scheduler_method class="Job_chain_node" property="error_state"/>)
                when it is set back more than the number of times specified here
                (see <scheduler_method class="Order" method="setback"/>).
            <!--Wenn derselbe Auftrag mehr als hier angegeben aufeinderfolgend zurückgesetzt worden ist
                (s. <scheduler_method class="Order" method="setback"/>),
                gerät er in den Fehlerzustand
                (s. <scheduler_method class="Job_chain_node" property="error_state"/>).-->
            </p>
            <p>
                See <scheduler_method class="Job" property="delay_order_after_setback"/> and
                <scheduler_element name="delay_order_after_setback" attribute="is_maximum" value="yes"/>.
            <!--Siehe <scheduler_method class="Job" property="delay_order_after_setback"/> und
                <scheduler_element name="delay_order_after_setback" attribute="is_maximum" value="yes"/>.-->
            </p>
        </description>
    </property>

    <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

    <method name="clear_delay_after_error">
        <com/>

        <title>
            Resets all delays which have previously been set using <code>delay_after_error</code>
        <!--Nimmt alle <code>delay_after_error</code> zurück-->
        </title>
    </method>

    <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

    <property name="process_class" access="read">
        <com>
            <com.result>
                <com.type class="Process_class"/>
            </com.result>
        </com>

        <title>The process class</title>
    <!--<title>Die Prozessklasse</title>-->

        <description>
            <p>
                See <scheduler_element name="job" attribute="process_class"/>.
            <!--Siehe <scheduler_element name="job" attribute="process_class"/>.-->
            </p>
        </description>

        <messages>
            <message level="error" code="SCHEDULER-161"/>
        </messages>
    </property>
    
    <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

    <method name="remove">
        <com/>

        <title>
            Removes a job
        <!--Entfernt den Job-->
        </title>

        <description>
            <p>
                The job is stopped - i.e. current tasks are terminated and no new ones are started.
                The job will be removed as soon as no more tasks are running.
            <!--Der Job wird gestoppt, d.h. laufende Tasks werden beendet,
                keine neuen werden gestartet.
                Sobald keine Task mehr läuft, wird der Job entfernt.-->
            </p>
            <p>
                Tasks queuing are ignored.
            <!--Tasks in der Warteschlange werden ignoriert.-->
            </p>
            <p>
                When no job task is running, the remove() function deletes the job immediately.
            <!--Wenn keine Task des Jobs läuft, entfernt remove() den Job sofort.-->
            </p>
            <p>
                Job orders (<scheduler_element name="job" attribute="order" value="yes"/>) cannot be removed.
            <!--Auftragsjobs (<scheduler_element name="job" attribute="order" value="yes"/>) können nicht entfernt werden.-->
            </p>
            <p>
                See <scheduler_element name="modify_job" attribute="cmd" value="remove"/>.
            <!--Siehe <scheduler_element name="modify_job" attribute="cmd" value="remove"/>.-->
            </p>
        </description>
    </method>

    <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

    <property name="configuration_directory" access="read">
        <com>
            <com.result>
                <com.type type="BSTR"/>
            </com.result>
        </com>

        <title>
            Directory for the job configuration file should dynamic configuration from hot folders be used
        <!--Verzeichnis der Konfigurationsdatei des Jobs-->
        </title>

        <description>
            <p>
                <code>""</code>, when a job does not come from a configuration directory.
            <!--<code>""</code>, wenn der Job nicht aus einem Konfigurationsverzeichnis stammt.-->
            </p>
        </description>
    </property>

    <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

    <property name="folder_path" access="read">
        <com>
            <com.result>
                <com.type type="BSTR"/>
            </com.result>
        </com>

        <title>
            The directory in which the job is to be found.
        <!--Pfad des Ordners, in dem der Job sich befindet.-->
        </title>

        <description>
            <p>
                <code>""</code>, when the job does come from the local 
                (<scheduler_element name="config" attribute="configuration_directory"/>) configuration file.
            <!--<code>""</code>, wenn der Job nicht aus dem lokalen Konfigurationsverzeichnis
                (<scheduler_element name="config" attribute="configuration_directory"/>) stammt.-->
            </p>
            
            
            <!-- Aus Püschels eMail vom 24.2.2008 17:12 -->
            <p>
                Returns the job part relative to the live directory.
                The path is to start with a slash ("/") and all path components are to be separated by slashes.
            <!--Liefert den Pfad des Jobs relativ zum Live-Directory.
                Der Pfad beginnt mit  einem "/", alle Bestandteile eines Pfads sind durch "/" getrennt-->
            </p>
            <p>
                Examples:
            <!--Beispiele:-->
            </p>
            <ul>
                <li>
                    <code>"/somewhere/excel"</code> will be returned for the 
                    <code>c:\scheduler\config\live\somewhere\excel\sample.job.xml</code> job;
                <!--für einen Job <code>c:\scheduler\config\live\somewhere\excel\sample.job.xml</code> wird <code>"/somewhere/excel"</code> zurückgeliefert-->
                </li>
                <li>
                    <code>"/"</code> returned for the 
                    <code>c:\scheduler\config\live\sample.xml</code> job and
                <!--für einen Job <code>c:\scheduler\config\live\sample.xml</code> wird <code>"/"</code> zurückgeliefert-->
                </li>
                <li>
                    <code>""</code> (an empty string) returned for a job outside the live directory.
                <!--für einen Job außerhalb des Live-Verzeichnisses wird <code>""</code> (Leerstring) zurückgeliefert-->
                </li>
            </ul>
        </description>
    </property>

    <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

    <property name="script_code" access="read">

			<java>
	      <com>
	          <com.result>
	              <com.type type="BSTR"/>
	          </com.result>
	      </com>


			</java>

      <description>
          <p>
              Returns the content of the element <scheduler_element name="script" />.
          </p>
      </description>

      <title>
      	The content of the script element
     	</title>

    </property>

    <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

    <description>
        <p>
            A task can either be waiting in the order queue or be running.
        <!--Eine Task kann wartend in der Task-Warteschlange des Jobs sein oder laufen.-->
        </p>
    </description>


</api.class>
